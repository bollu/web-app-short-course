#+TITLE: The REST API
#+AUTHOR: VLEAD
#+DATE: [2016-07-26 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  This document illustrates building of the REST API.

  
* REST

** Google OAuth Credentials
      - Google OAuth service required URLs (Credentials) should be specified

#+NAME: google_oauth_configuration
#+BEGIN_SRC python

session_list = {}
oauth = OAuth()

google_oauth = oauth.remote_app(
    'google',
    consumer_key=oauth_config.CONSUMER_KEY,
    consumer_secret=oauth_config.CONSUMER_SECRET,
    request_token_params={
        'scope': 'email', 'prompt' : 'select_account'
    },
    base_url='https://www.googleapis.com/oauth2/v1/',
    request_token_url=None,
    access_token_method='POST',
    access_token_url='https://accounts.google.com/o/oauth2/token',
    authorize_url='https://accounts.google.com/o/oauth2/auth',
)

#+END_SRC
** Jsonify_list
#+NAME: jsonify_list
#+BEGIN_SRC python
# return a list of dicts as json with correct mime types
# flask does not provide a jsonify for lists; hence this method
def jsonify_list(data):
    if type(data) is not list:
        raise Exception('jsonify_list function accepts only a list')
    s_data = []
    for d in data:
        s_data.append(d.to_client())
    return make_response(json.dumps(s_data), 200,
                         {'content-type': 'application/json'})

#+END_SRC

** Google Callback response =API=
      - Once the Google verfies the user credentials it will send callback
        response to =/authorized= api which should be registered at google's
        dashboard as one of Authorized redirect URIs

      - Once the google authenticates the user, =Outreach-Portal= will
        authorize the user by providing the user dashboard based on the role of
        the user. 

#+NAME: callback_google_api
#+BEGIN_SRC python
@api.route('/authorized')
def authorized():
    try:
        resp = google_oauth.authorized_response()
        if resp is None:
            return jsonify({"Status" : "User denied access"})
        session['google_token'] = (resp['access_token'], '')
        user_info = google_oauth.get('userinfo')
        email = str(user_info.data['email'])
        try:
            roles = SystemInterface.authorize_user(email)
            session['email'] = email
            return jsonify_list(roles)
        except Exception as e:
            session.pop('google_token', None)
            return jsonify({"Exception" : str(e)})

    except Exception as e:
        print str(e)
        return jsonify({"Exception" : str(e)})

        
#+END_SRC
** Google token getter
      - Once the google verfies the credentials token will be shared.
#+NAME: google_oauth_token
#+BEGIN_SRC python
@google_oauth.tokengetter
def get_google_oauth_token():
    return session.get('google_token')

#+END_SRC
** =Login= API
   - When user clicks on =login= button from f/e it will invoke
     =/login= api and thereby it will forward request to =google=
#+NAME: login_route
#+BEGIN_SRC python
@api.route('/login')
def login():
    return google_oauth.authorize(callback=url_for('APIs.authorized', _external=True))

#+END_SRC
** =Logout= API
      - When user clicks on =logout= button from f/e it will invoke
   =/logout= api and thereby it will destroy all session variables.
#+NAME: logout_route
#+BEGIN_SRC python

@api.route('/logout')
def logout():
    if 'google_token' in session:
        email = session['email']
        role = session['role']
        key = session['google_token']
        local_session = {'email': email,
                         'role': role,
                         'key': key }        
        try:
            session_obj = SystemInterface.logout(local_session)
            session.pop('google_token', None)
            session.pop('email', None)
            session.pop('role', None)
            return jsonify({"status" : "Successfully logged out from system"})
        except Exception as e:
            return jsonify({"Exception" :  str(e)})
    else:
        return jsonify({"status" :  "You are not logged in user"})

#+END_SRC

** Create Session
   - API to create login and system sessions
#+NAME: create_session
#+BEGIN_SRC python
@api.route('/create_session', methods=['POST'])
def create_session():
    if request.method == 'POST':        
        data_json = json.dumps(request.get_json())
        data_dict = yaml.safe_load(data_json)
        email = session['email']
        role = data_dict['role']
        key = session['google_token']
        session_dict = {'email': email,
                            'role': role,
                            'key': key }        
        try:            
            session_obj = SystemInterface.create_session_in_system(session_dict)
            session['role'] = role
            return jsonify({"status" : "success"})
        except Exception as e:
            abort(500, str(e))

#+END_SRC
** Add User
   - API to create users
#+NAME: add_user
#+BEGIN_SRC python

@api.route('/add_user', methods=['POST'])
def add_user():
    if request.method == 'POST':
        
        data_json = json.dumps(request.get_json())
        data_dict = yaml.safe_load(data_json)
        user_dict = {'email': data_dict['email'],
                        'role': data_dict['role'],
                        'name': data_dict['name'] }
        
        email = session['email']
        role = session['role']
        key = session['google_token']
        session_dict = {'email': email,
                            'role': role,
                            'key': key }        
        try:            
            user_obj = SystemInterface.add_user(session_dict, user_dict)
            return jsonify({"status" : "success"})
        except Exception as e:
            abort(500, str(e))


#+END_SRC

** Show Users
   - API to Show Users
#+NAME: show_users
#+BEGIN_SRC python

@api.route('/show_users', methods=['GET'])
def show_users():
    if request.method == 'GET':
        email = session['email']
        role = session['role']
        key = session['google_token']
        session_dict = {'email': email,
                            'role': role,
                            'key': key }        
        try:            
            users = SystemInterface.show_users(session_dict)
            return jsonify_list(users)
        except Exception as e:
            abort(500, str(e))

#+END_SRC

** Show User Details
   - API to Show User Deatils
#+NAME: show_user_details
#+BEGIN_SRC python

@api.route('/show_user_details', methods=['POST'])
def show_user_details():

    if request.method == 'POST':
        data_json = json.dumps(request.get_json())
        data_dict = yaml.safe_load(data_json)
        email_str = data_dict['email']

        email = session['email']
        role = session['role']
        key = session['google_token']
        session_dict = {'email': email,
                            'role': role,
                            'key': key }        
        try:            
            user = SystemInterface.show_user_details(session_dict, email_str)
            return jsonify(user.to_client())
        except Exception as e:
            abort(500, str(e))

#+END_SRC

   
* Infra                                                         :boilerplate:

** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import os
import requests
import json
from flask_oauthlib.client import OAuth
from runtime.config import google_oauth_config as oauth_config
from flask import session, render_template, Blueprint, request, \
     jsonify, abort, current_app, redirect, url_for, make_response
from flask import Flask
from runtime.utils.type_utils import jsonify_list
from runtime.exceptions.custom_exceptions import *
from runtime.system.system_interface import SystemInterface
import yaml

api = Blueprint('APIs', __name__)

#+end_src


** tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from sqlalchemy.exc import IntegrityError
from runtime.utils.class_persistence_template import db
from runtime.rest.app import create_app
#from runtime.config.system_config import KEY
from runtime.rest.api import *
from runtime.system.system import System
import datetime
config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC

    
* Tangle                                                        :boilerplate:

** sources
#+BEGIN_SRC python :tangle api.py :eval no :noweb yes

<<imports_for_sources>>
<<google_oauth_configuration>>
<<jsonify_list>>
<<login_route>>
<<logout_route>>
<<callback_google_api>>
<<google_oauth_token>>
<<create_session>>
<<add_user>>
<<show_users>>
<<show_user_details>>

#+END_SRC


** tests
#+BEGIN_SRC python :tangle test_api.py :eval no :noweb yes
<<imports_for_tests>>
<<run_test_cases>>
#+end_src

