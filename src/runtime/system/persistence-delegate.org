#+TITLE: Persistence Delegate for the System
#+AUTHOR: VLEAD
#+DATE: [2016-08-04 Thu]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil


* Persistence Delegate
  Persistence Delegate encapsulates a set of functions where each function
  performs a specific task.  With the use of these delegates, the core
  implementation of the =system= will not alter but by plugging delegates that
  are specific to each environment, for example, be it either objects or
  persistence, the =system= for that particular environment is derived while
  not modifying the =system= class.

** Initialize Persistence Delegate
   Provides all the delegates that operate on objects.

*** class_object_delegate 
#+NAME: class_persistence_delegate
#+BEGIN_SRC python
class PersistenceDelegate():

    def __init__(self):
        pass

#+END_SRC

*** get_role_set
#+NAME: get_role_set
#+begin_src python
    def get_role_set(self):
        return Role.get_all()

#+end_src


*** get_user_set
#+NAME: get_user_set
#+begin_src python
    def get_user_set(self):
        return User.get_all()

#+end_src


*** Tests
#+NAME: test_initialize_persistence_delegate
#+BEGIN_SRC python
class TestPersistenceDelegate(TestCase):
    TESTING = True
    
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        self.delegate = PersistenceDelegate()
        populate_db()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
   
    def test_initialize_persistence_delegate(self):
         print "test_initialize_persistence_delegate"
         role_set = self.delegate.get_role_set()
         user_set = self.delegate.get_user_set()
         self.assertEqual(len(role_set), 2)
         self.assertEqual(role_set[0].get_by_id(1).get("name"), 
                              Config.admin_role)
         self.assertEqual(len(user_set), 1)
         self.assertEqual(user_set[0].get("role").get("name"), 
                              Config.admin_role)

#+END_SRC


** Other functions
   Other functions that help =System= perform the operations. 

*** Check if =user= already exists
    This function checks if a user is already in the database of the =System=.
#+NAME: user_exists
#+BEGIN_SRC python
    def user_exists(self, user):
        if self.email_exists(user.get("email")):
            return user == self.get_user(email=user.get("email"))
        else:
            return False

#+END_SRC

**** Tests
#+NAME: test_user_exists
#+BEGIN_SRC python
    def test_user_exists(self):
         print "test_user_exists"
         user = self.delegate.get_user_set()[0]
         self.assertEqual(self.delegate.user_exists(user), True)

#+END_SRC


*** Check if =name= already exists
    This function checks if a name is already in the database of the =System=.
#+NAME: name_exists
#+BEGIN_SRC python
    def name_exists(self, name):
        return name == self.get_name(name=name.get("name"))

#+END_SRC

**** Tests
#+NAME: test_name_exists
#+BEGIN_SRC python
    def test_name_exists(self):
         print "test_name_exists"
         name = self.delegate.get_name(name=Config.admin_name)
         self.assertEqual(self.delegate.name_exists(name), True)
         name = Name(name="Temp user")
         self.assertEqual(self.delegate.name_exists(name), False)

#+END_SRC


*** Check if =email= already exists
    This function checks if email is already in the database of the =System=.
#+NAME: email_exists
#+BEGIN_SRC python
    def email_exists(self, email):
        return email == self.get_email(email=email.get("email"))

#+END_SRC

**** Tests
#+NAME: test_email_exists
#+BEGIN_SRC python
    def test_email_exists(self):
         print "test_email_exists"
         email = self.delegate.get_email(email=Config.admin_email)
         self.assertEqual(self.delegate.email_exists(email), True)
         email = Email(email="abc@gnu.org")
         self.assertEqual(self.delegate.email_exists(email), False)

#+END_SRC


*** Add a user to the system
    This function adds a user to the database of the system.
#+NAME: add_user
#+BEGIN_SRC python
    def add_user(self, user):
        name = user.get("name")
        email = user.get("email")
        if not self.name_exists(name):
            name.save()
        email.save()
        user.save()
        return self.get_user(email=email)

#+END_SRC

**** Tests
#+NAME: test_add_user
#+BEGIN_SRC python
    def test_add_user(self):
         print "test_add_user"
         name=Name(name="some user")
         email=Email(email="tt@kk.com")
         user = User(name=name, email=email, 
                         role=self.delegate.get_role_set()[1])

         user = self.delegate.add_user(user)
         self.assertEqual(self.delegate.user_exists(user), True)

#+END_SRC


*** Delete a user from the system
    This function deletes a user from the database maintained by the system.
#+NAME: del_user
#+BEGIN_SRC python
    def del_user(self, user):
        name = user.get("name")
        email = user.get("email")
        user.delete()
        email.delete()
        if self.get_user(name=name) is None:
            name.delete()
        
        return user

#+END_SRC

**** Tests
#+NAME: test_del_user
#+BEGIN_SRC python
    def test_del_user(self):
         print "test_del_user"

         name=Name(name="some user")
         email=Email(email="tt@kk.com")
         user = User(name=name, email=email, 
                         role=self.delegate.get_role_set()[1])

         user = self.delegate.add_user(user)
         self.assertEqual(self.delegate.user_exists(user), True)
         self.delegate.del_user(user)
         self.assertEqual(self.delegate.user_exists(user), False)

#+END_SRC


*** Return the users in the system
    This function returns the list of users in the database maintained by the system.
#+NAME: get_users
#+BEGIN_SRC python
    def get_users(self):
        return self.get_user_set()

#+END_SRC

**** Tests
#+NAME: test_get_users
#+BEGIN_SRC python
    def test_get_users(self):
         print "test_get_users"

         name=Name(name="some user")
         name.save()
         email=Email(email="tt@kk.com")
         email.save()
         user = User(name=name, email=email, 
                         role=self.delegate.get_role_set()[1])

         user = self.delegate.add_user(user)
         self.assertEqual(len(self.delegate.get_users()), 2)

#+END_SRC


*** Check if user has admin role
    This function returns true if role of a user is admin
#+NAME: is_admin
#+BEGIN_SRC python
    def is_admin(self, user):
        return user.get("role").get("name") == Config.admin_role

#+END_SRC

**** Tests
#+NAME: test_is_admin
#+BEGIN_SRC python
    def test_is_admin(self):
         print "test_is_admin"

         name=Name(name="some user")
         name.save()
         email=Email(email="tt@kk.com")
         email.save()
         user = User(name=name, email=email, 
                         role=self.delegate.get_role_set()[1])

         user = self.delegate.add_user(user)

         self.assertEqual(self.delegate.is_admin(user), False)

         name=Name(name="some another user")
         name.save()
         email=Email(email="someanother@gnu.org")
         email.save()
         user = User(name=name, email=email, 
                         role=self.delegate.get_role_set()[0])

         user = self.delegate.add_user(user)

         self.assertEqual(self.delegate.is_admin(user), True)

#+END_SRC


*** Get Name 
    This function returns a Name object from the database based on the name
    string provided.

#+NAME: get_name
#+BEGIN_SRC python
    def get_name(self, **kwargs):
        name_lst = Name.apply_filters(**kwargs)
        if name_lst:
            return name_lst[0]
        else:
            return None

#+END_SRC

**** Tests
#+NAME: test_get_name
#+BEGIN_SRC python
    def test_get_name(self):
         print "test_get_name"
         name_obj = self.delegate.get_name(name=Config.admin_name)
         self.assertEqual(name_obj.get("name"),  Config.admin_name)

#+END_SRC


*** Get Email
    This function returns an Email object from the database based on the email
    string provided.

#+NAME: get_email
#+BEGIN_SRC python
    def get_email(self, **kwargs):
        email_lst = Email.apply_filters(**kwargs)
        if email_lst:
            return email_lst[0]
        else:
            return None

#+END_SRC

**** Tests
#+NAME: test_get_email
#+BEGIN_SRC python
    def test_get_email(self):
         print "test_get_email"
         email_obj = self.delegate.get_email(email=Config.admin_email)
         self.assertEqual(email_obj.get("email"), Config.admin_email)

#+END_SRC


*** Get Role
    This function returns either admin or user role from the roles in database
#+NAME: get_role
#+BEGIN_SRC python
    def get_role(self, **kwargs):
        role_lst = Role.apply_filters(**kwargs)
        if role_lst:
            return role_lst[0]
        else:
            None

#+END_SRC

**** Tests
#+NAME: test_get_role
#+BEGIN_SRC python
    def test_get_role(self):
         print "test_get_role"
         role_obj = self.delegate.get_role(name=Config.admin_role)
         self.assertEqual(role_obj.get("name"), Config.admin_role)

#+END_SRC


*** Get User
    This function returns a user if present in the database.  If the user is
    not present, =None= type is returned.
#+NAME: get_user
#+BEGIN_SRC python
    def get_user(self, **kwargs):
        usr_lst = User.apply_filters(**kwargs)
        if usr_lst:
            return usr_lst[0]
        else:
            return None

#+END_SRC

**** Tests
#+NAME: test_get_user
#+BEGIN_SRC python
    def test_get_user(self):
         print "test_get_user"
         email_obj = self.delegate.get_email(email=Config.admin_email)
         user_obj = self.delegate.get_user(email=email_obj)
         self.assertEqual(user_obj.get("email").get("email"), 
                              Config.admin_email)

#+END_SRC


*** Get user with admin role
    This function returns the user the admin role from the database
#+NAME: get_admin_user
#+BEGIN_SRC python
    def get_admin_user(self):
        role_obj = self.get_role(name=Config.admin_role)
        return self.get_user(role=role_obj)

#+END_SRC

**** Tests
#+NAME: test_get_admin_user
#+BEGIN_SRC python
    def test_get_admin_user(self):
         print "test_get_admin_user"
         self.assertEqual(self.delegate.get_admin_user(),
                              self.delegate.get_user_set()[0])

#+END_SRC


*** Get user by Email
    This function returns the user by email from the database
#+NAME: get_user_by_email
#+BEGIN_SRC python
    def get_user_by_email(self, email):
        return self.get_user(email=email)

#+END_SRC

**** Tests
#+NAME: test_get_user_by_email
#+BEGIN_SRC python
    def test_get_user_by_email(self):
        print "test_get_user_by_email"
        email = Email.apply_filters(email=Config.admin_email)[0]
        user = self.delegate.get_user_by_email(email)
        self.assertEqual(user.get("email"), email)

        email = Email(email="tt@kk.com")
        email.save()
        user = self.delegate.get_user_by_email(email)
        self.assertEqual(user, None)

#+END_SRC


*** Set Email of a User
    This function sets Email of a user in the user set. No exception is thrown
    here, the upper layer which is calling this function should ensure =user=
    exists whose email is changed. 
#+NAME: set_email
#+BEGIN_SRC python
    def set_email(self, user, email):
        usr = self.get_user_by_email(user.get("email"))

        email_list =  Email.apply_filters(email=email.get("email"))
        if not email_list:
            email.save()
            email_list =  Email.apply_filters(email=email.get("email"))

        usr.set(email=email_list[0])
        return self.get_user_by_email(usr.get("email"))

#+END_SRC

**** Tests
#+NAME: test_set_email
#+BEGIN_SRC python
    def test_set_email(self):
        print "test_set_email"
        email = Email.apply_filters(email=Config.admin_email)[0]
        user = self.delegate.get_user_by_email(email)
        email = Email(email="abc@gnu.org")
        user = self.delegate.set_email(user, email)
        self.assertEqual(user.get("email"), email)

#+END_SRC


*** Set Name of a User
    This function sets Name of a user in the user set. No exception is thrown
    here, the upper layer which is calling this function should ensure =user=
    exists whose name is changed. 
#+NAME: set_name
#+BEGIN_SRC python
    def set_name(self, user, name):
        usr = self.get_user_by_email(user.get("email"))

        name_list =  Name.apply_filters(name=name.get("name"))
        if not name_list:
            name.save()
            name_list =  Name.apply_filters(name=name.get("name"))

        usr.set(name=name_list[0])
        return self.get_user_by_email(usr.get("email"))


#+END_SRC

**** Tests
#+NAME: test_set_name
#+BEGIN_SRC python
    def test_set_name(self):
        print "test_set_name"

        email = Email.apply_filters(email=Config.admin_email)[0]
        user = self.delegate.get_user_by_email(email)
        name = Name(name="Jimi Hendrix")
        user = self.delegate.set_name(user, name)
        self.assertEqual(user.get("name"), name)

#+END_SRC


* Infra                                                         :boilerplate:

** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.persistence.entities import *
from runtime.config.config import Config
from runtime.exceptions.custom_exceptions import *

#+end_src


** Tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from sqlalchemy.exc import IntegrityError
from runtime.system.persistence_delegate import *
from runtime.rest.app import create_app

config = {
    'SQLALCHEMY_DATABASE_URI': ''
}

#+end_src


*** Initialize database for tests
    Before any test is run, the database is populated with two roles and one
    user whose role is admin.

#+name: populate_db
#+BEGIN_SRC python
def populate_db():
    r_a = Role(name=Config.admin_role)
    r_a.save()
    r_u = Role(name=Config.user_role)
    r_u.save()
    name=Name(name=Config.admin_name)
    name.save()
    email=Email(email=Config.admin_email)
    email.save()
    usr = User(name=name, email=email, role=r_a)
    usr.save()

#+END_SRC


*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangling                                                      :boilerplate:

** sources
#+BEGIN_SRC python :tangle persistence_delegate.py :eval no :noweb yes
<<imports_for_sources>>
<<class_persistence_delegate>>
<<get_role_set>>
<<get_user_set>>
<<user_exists>>
<<name_exists>>
<<email_exists>>
<<add_user>>
<<del_user>>
<<get_users>>
<<is_admin>>
<<get_name>>
<<get_email>>
<<get_role>>
<<get_user>>
<<get_admin_user>>
<<get_user_by_email>>
<<add_user>>
<<del_user>>
<<set_email>>
<<set_name>>
#+end_src


** tests
#+BEGIN_SRC python :tangle test_persistence_delegate.py :eval no :noweb yes
<<imports_for_tests>>
<<populate_db>>
<<test_initialize_persistence_delegate>>
<<test_user_exists>>
<<test_name_exists>>
<<test_email_exists>>
<<test_get_users>>
<<test_is_admin>>
<<test_get_name>>
<<test_get_email>>
<<test_get_role>>
<<test_get_user>>
<<test_get_admin_user>>
<<test_get_user_by_email>>
<<test_add_user>>
<<test_del_user>>
<<test_set_email>>
<<test_set_name>>
<<run_test_cases>>
#+end_src
