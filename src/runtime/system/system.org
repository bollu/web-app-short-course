#+TITLE: Mini Version of User Directory Application: System
#+AUTHOR: VLEAD
#+DATE: [2016-06-07 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction

A system has clear boundaries of input, output and state.
In the context of our application, the system interacts with
the external world (through command line function calls)
and also manages the entity objects in such a way that the
system invariants are maintained. 


The system holds two state variables:

 - =user_set= :: The set of users in the system
 - =session_set= :: The set of sessions in the system

The system's inputs are in terms of /operations/.  Each
operation consists of an operation name and a sequence of
arguments.  

In this implementation, an operation is identified by a
class.  The dictionary =ops_table= maps operation names to
their corresponding classes.

Each operation is divided into five checks.  A /check/ is a
predicate that either returns true or throws an exception.

The following checks are performed:

  - Arity check :: checks if the operation has the right
       number  of arguments.

  - Type check :: checks if the arguments have the correct
       type. 

  - Auth check :: checks if the session performing the
       operation is authorized to do so.

  - State check :: checks if the operation meets all the
       constraints imposed by the state of the system
       (referential integrity constraints, etc.)
 

** Structure of each operation class

The class corresponding to each operation has five fields:

  - arg_types :: a list of type predicates.  The length of
       this list is the arity of the operation.  The arity
       check is simply a comparison of the length of this
       list with the length of the list of arguments.  Each
       predicate in the =arg_types= list is applied to the
       corresponding argument to check the type of that
       argument.

  - auth_check :: a function that checks if the  =args= (which
       may include a session) together satisfy the
       authorization conditions imposed by the operation. 

  - state_check :: a function that checks =args= and checks
       if the particular state invariant holds.

  - action :: a function on args that (presumably) changes
       the state of the system and also returns an answer.
       An exception thrown by this function indicates a
       serious failure in the application (e.g., out of
       memory error). 


* The =System= class

** Constructor

   The constructor ensures that the system ensures the presence of at least one
   user with role =admin=.

#+NAME: class_system
#+begin_src python
class System ():
    s_handlers = populate_handlers()
    role_set = s_handlers['initialize_role_set']()
    user_set = s_handlers['initialize_user_set']()
    session_set = []


    def __init__(self):
        raise Error('Can not instantiate')

    @staticmethod
    def is_session_admin(session):
        return session.get("role").get('name') == "admin"
    
    @staticmethod    
    def is_session_user(session):
        return session.get("role").get('name') == "user"

#+end_src

*** Test Constructor
#+NAME: test_system_constructor
#+BEGIN_SRC python
class TestSystemConstructor(TestCase):
    TESTING = True

   
    def test_system_constructor(self):
        print "test_system_constructor"
        self.assertEqual(System.user_set[0].get("name").get("name"),
                         Config.admin_name)
        self.assertEqual(System.user_set[0].get("email").get("email"),
                         Config.admin_email)
        self.assertEqual(System.user_set[0].get('role').get('name'),
                         Config.admin_role)

    # def test_is_session_admin(self):
    #     print "test_is_session_admin"
    #     admin_user=System.user_set[0]
    #     session = Session(user=admin_user,role=Role.admin)
    #     System.session_set.append(session)
    #     self.assertEqual(System.is_session_admin(session), True)

#+END_SRC


* Infra                                                         :boilerplate:

** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.system.handlers import *
from runtime.exceptions.custom_exceptions import *

#+end_src


** Tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from unittest import TestCase
from system import *

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangling                                                      :boilerplate:

** sources
#+BEGIN_SRC python :tangle system.py :eval no :noweb yes
<<imports_for_sources>>
<<class_system>>

#+end_src


** tests
#+BEGIN_SRC python :tangle test_system.py :eval no :noweb yes
<<imports_for_tests>>
<<test_system_constructor>>
<<run_test_cases>>
#+end_src

